import numpy as np
from math import sqrt, cos, pi
from PIL import Image, ImageColor

class LandGenerator:
    def __init__(self, width: int, height: int):
        self.width = width
        self.height = height

        self.arr = np.zeros([width, height])

    def makeLand(self):
        raise NotImplementedError()

    def generateImage(self):
        img = Image.new('RGB', (self.width, self.height))

        for _x in range(self.width):
            for _y in range(self.height):
                img.putpixel((_x, _y), self.getColorForHeight(self.arr[_x,_y]))

        return img

    def isInRange(self, point):
        if point[0] < 0 or point[0] >= self.width or point[1] < 0 or point[1] >= self.height: return False

        return True
    
    def getColorForHeight(self, height):
        colors = [(242, 13, 13),(242, 17, 13),(242, 20, 13),(242, 24, 13),(242, 28, 13),(242, 32, 13),(242, 36, 13),(242, 40, 13),(242, 43, 13),(242, 47, 13),(242, 51, 13),(242, 55, 13),(242, 59, 13),(242, 62, 13),(242, 66, 13),(242, 70, 13),(242, 74, 13),(242, 78, 13),(242, 82, 13),(242, 85, 13),(242, 89, 13),(242, 93, 13),(242, 97, 13),(242, 101, 13),(242, 105, 13),(242, 108, 13),(242, 112, 13),(242, 116, 13),(242, 120, 13),(242, 124, 13),(242, 127, 13),(242, 131, 13),(242, 135, 13),(242, 139, 13),(242, 143, 13),(242, 147, 13),(242, 150, 13),(242, 154, 13),(242, 158, 13),(242, 162, 13),(242, 166, 13),(242, 170, 13),(242, 173, 13),(242, 177, 13),(242, 181, 13),(242, 185, 13),(242, 189, 13),(242, 193, 13),(242, 196, 13),(242, 200, 13),(242, 204, 13),(242, 208, 13),(242, 212, 13),(242, 215, 13),(242, 219, 13),(242, 223, 13),(242, 227, 13),(242, 231, 13),(242, 235, 13),(242, 238, 13),(242, 242, 13),(238, 242, 13),(235, 242, 13),(231, 242, 13),(227, 242, 13),(223, 242, 13),(219, 242, 13),(215, 242, 13),(212, 242, 13),(208, 242, 13),(204, 242, 13),(200, 242, 13),(196, 242, 13),(193, 242, 13),(189, 242, 13),(185, 242, 13),(181, 242, 13),(177, 242, 13),(173, 242, 13),(170, 242, 13),(166, 242, 13),(162, 242, 13),(158, 242, 13),(154, 242, 13),(150, 242, 13),(147, 242, 13),(143, 242, 13),(139, 242, 13),(135, 242, 13),(131, 242, 13),(128, 242, 13),(124, 242, 13),(120, 242, 13),(116, 242, 13),(112, 242, 13),(108, 242, 13),(105, 242, 13),(101, 242, 13),(97, 242, 13),(93, 242, 13),(89, 242, 13),(85, 242, 13),(82, 242, 13),(78, 242, 13),(74, 242, 13),(70, 242, 13),(66, 242, 13),(62, 242, 13),(59, 242, 13),(55, 242, 13),(51, 242, 13),(47, 242, 13),(43, 242, 13),(40, 242, 13),(36, 242, 13),(32, 242, 13),(28, 242, 13),(24, 242, 13),(20, 242, 13),(17, 242, 13),(13, 242, 13),(13, 242, 17),(13, 242, 20),(13, 242, 24),(13, 242, 28),(13, 242, 32),(13, 242, 36),(13, 242, 40),(13, 242, 43),(13, 242, 47),(13, 242, 51),(13, 242, 55),(13, 242, 59),(13, 242, 62),(13, 242, 66),(13, 242, 70),(13, 242, 74),(13, 242, 78),(13, 242, 82),(13, 242, 85),(13, 242, 89),(13, 242, 93),(13, 242, 97),(13, 242, 101),(13, 242, 105),(13, 242, 108),(13, 242, 112),(13, 242, 116),(13, 242, 120),(13, 242, 124),(13, 242, 128),(13, 242, 131),(13, 242, 135),(13, 242, 139),(13, 242, 143),(13, 242, 147),(13, 242, 150),(13, 242, 154),(13, 242, 158),(13, 242, 162),(13, 242, 166),(13, 242, 170),(13, 242, 173),(13, 242, 177),(13, 242, 181),(13, 242, 185),(13, 242, 189),(13, 242, 193),(13, 242, 196),(13, 242, 200),(13, 242, 204),(13, 242, 208),(13, 242, 212),(13, 242, 215),(13, 242, 219),(13, 242, 223),(13, 242, 227),(13, 242, 231),(13, 242, 235),(13, 242, 238),(13, 242, 242),(13, 238, 242),(13, 235, 242),(13, 231, 242),(13, 227, 242),(13, 223, 242),(13, 219, 242),(13, 215, 242),(13, 212, 242),(13, 208, 242),(13, 204, 242),(13, 200, 242),(13, 196, 242),(13, 193, 242),(13, 189, 242),(13, 185, 242),(13, 181, 242),(13, 177, 242),(13, 173, 242),(13, 170, 242)]
        hue_min = 199
        _h = int(height)
        hue = hue_min - _h if _h <= hue_min else 0

        return colors[hue]